;>
Groups and the agents it contains were intentionally built in a simplified
manner and with as much shared structure as we could muster to both speed
development and make each agent feel familiar. We avoided centralizing and
normalizing types/state so that each agent can develop independently as
new product requirements arise.

To reiterate these are the agents:

- *%groups:* facilitates forming, managing, and joining groups
- *%chat:* allows for creating chat channels, in addition supports the
  ability to create 1:1 and 1:many direct messages
- *%heap:* allows for creating a channel with collections of links and 
  text snippets, and the ability to comment on those items
- *%diary:* allows for creating a channel for longform communication, 
  supports different display modes and commenting
- *%hark:* allows for creating generic notifications and also notifications
  about specific groups/channels, and sourcing where they came from

## General Structure

The general structure of the desk is as follows:

- `/app:` the agents
- `/doc:` the docs
- `/gen:` generators for testing and manipulating the agents from the dojo
- `/lib:` helper libraries
  - `*-json:` formatters for converting to and from JSON
- `/mar:` marks, agent specific marks are generally separated into their
  own folders
- `/sur:` the types for each agent
- `/tests:` the tests

Each agent follows the *abet-abed* pattern with domain specific "cores" 
separated from the actual gall agent arms.

*abet-abed*

Generally most of the data we access is put into maps. In this pattern you
use two arms in your domain specific core, something like this:

```
++  ca-core
  |_  [=flag:c =chat:c gone=_|]
  ++  ca-core  .
  ++  ca-abet  
    %_  cor
        chats  
      ?:(gone (~(del by chats) flag) (~(put by chats) flag chat))
    ==
  ++  ca-abed
    |=  f=flag:c
    ca-core(flag f, chat (~(got by chats) f))
  ::  ...
```

You can see the `ca-core` is actually a door which gives access to a
specific chat. To "initialize" the door we call `ca-abed` with the id of
the chat we care about `(ca-core:ca-abed flag)`. 

Since this returns `ca-core` itself we can then pull an arm off of this 
and that arm will have the specific chat in the subject: 
`(ca-update:(ca-core:ca-abed flag) action)`

We conventionally also always return the core at the end of each arm that
would be called like this so that we can finally call `ca-abet` like:
`ca-abet:(ca-update:(ca-core:ca-abed flag) action)` This will then update
state with the new state of the chat as a final step.

What follows is a reference for each agent and it's associated types and api.