;>
The %groups agent is entirely concerned with forming, managing, and joining groups. It keeps track of members, permissions, channels, and organization.

## types
All types are located in `/sur/groups`

- $flag: ID for a group
- $group: collection of people and the pathways in which they interact, group holds all data around members, permissions, and channels
- $nest: ID for a channel, {app}/{ship}/{name}
- $channel: a medium for interaction, the channel type is a collection of metadata about a specific agent integration organization, and its own metadata to represent the group
- $fleet: group members and their associated metadata
- $sect: ID for cabal, similar to a role
- $cabal: metadata representing a $sect or role
- $cordon: group entry and visibility permissions
- $bloc: superuser sects, allowed to make modifications to the group itself
- $zone: channel grouping and ordering
- $diff: the general set of changes that can be made to a group
- $action: the complete set of data required to edit a group
- $update: a representation in time of a modification of a group
- $create: a request to make a group
- $log: a time ordered map of all modifications to groups
- $net: an indicator of whether I'm a host or subscriber
- $join: a join request, can elect to join all channels
- $knock: a request to enter a closed group
- $gang: view of foreign group
- $progress: the state of a group join 
- $claim: a mark for gangs to represent a join in progress
- $preview: the metadata and entry policy for a group
- $invite: a marker to show you've been invited to a group

## api

### pokes
Each poke is organized by mark

- `%group-action` the main mark for acting on a group.
  - `%bloc` adds and removes `sect`'s to superuser/admin level
  - `%cabal` modifies the metadata for a `sect`
  - `%channel` creates, modifies, and deletes channels and their metadata
  - `%cordon` modifies the `cordon` for a group
  - `%create` creates a group, used by the host to mark the creation in
    the log
  - `%del` deletes the group
  - `%fleet` modifies the members of the group and their `sect`'s or roles
  - `%meta` modifies the metadata of the group
  - `%zone` modifies the zones or the order of channels within them
- `%group-create` creates a group to be hosted on your own ship
- `%group-invite` invites another ship by proxying a `%group-invite` poke to their ship, which triggers the creation of a `gang` on their ship
- `%group-join` begins the joining process by adding a `claim` to the 
  `gang` associated with the group being joined to track progress. Once
  finished the group will be created on the ship and subscribed to updates
  from the host.
- `%group-knock` for groups with a "shut" `cordon` to enter you must
  request to join or "knock". This places the knocker into the `%ask` set
  of ships in the cordon.
- `%group-rescind` for groups with a "shut" `cordon` any requests to join
  can be rescinded before they are accepted. This pokes the host with a
  `%group-action` to delete the `%ask`
- `%group-leave` leaves a group if you are not the host
- `%group-import` imports a group from the old Groups app (%landscape) 
  and converts it into a new group
- `%invite-decline` removes the invitation to a group from the `gang`

### scries
Each scry is organized by path

- `x/groups` retrieves the full map of groups on the ship, keyed by `flag`
- `x/gangs` retrieves the full map of gangs on the ship, keyed by `flag`
- `x/groups/{ship}/{name}` combination of `{ship}/{name}` represents the
  group's `flag`
  - `/fleet/ships` retrieves the ships in the fleet
  - `/fleet/{ship}/vessel` retrieves the `vessel` of a particular ship
  - `/channel/{app}/{ship}/{name}` where {app}/{ship}/{name} represents
    the `nest`
    - `/can-read/{src}` returns a `loob` whether or not the `src` ship
      can see this channel

### subscriptions
Each subscription is organized by path

- `/groups`
- `/groups/ui` sends group updates to the UI, generally `%group-action` 
  events that aren't related to a specific group, like creation and 
  deletion, or removal of a `gang` after joining
- `/gangs/updates` sends full map of `gangs` for updating the UI
- `/groups/{ship}/{name}`
  - `/ui` sends updates about a specific group to the UI, generally 
    `%group-action`
  - `/preview` sends a preview of the group and then immediately kicks,
    used by `gang-core` to generate a preview of a group
  - `/updates`
    - `/init` sends a `%group-init`
    - `/{@da}` sends down a `%group-log` to sync state with the host,
      from the specified time
- `/gangs/index/{ship}` for the requester, this proxies a subscription to
  the same path on the ship in question. sends down `%group-previews` 
  containing the map of all visible groups on the ship back to the requester
  and immediately kicks
- `/gangs/{ship}/{name}` proxies a subscription for a group preview to 
  the ship in question, eventually sending a `%group-preview` and kicking
- `/chan/{app}/{ship}/{name}` proxies a subscription to the host of the
  channel represented by the `nest`, `{app}/{ship}/{name}`, the host sends
  a `%channel-preview` back and immediately kicks

